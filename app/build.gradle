apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.example.myplugin.Myplugin'

apply from: 'jacoco.gradle'

def enable = project.hasProperty('enable') ? project.property('enable') : "false"

println enable

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.android"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            /**打开覆盖率统计开关*/
            testCoverageEnabled = (enable == "true")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        abortOnError true
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.dianping.android.sdk:logan:1.2.4'
    implementation 'com.tencent.mars:mars-xlog:1.2.3'

    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'

    //implementation 'com.google.android.exoplayer:exoplayer:2.11.1'

    implementation 'com.tencent.liteavsdk:LiteAVSDK_Smart:latest.release'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"

    //room
    implementation "androidx.room:room-runtime:2.2.6"
    implementation "androidx.room:room-ktx:2.2.6"
    kapt "androidx.room:room-compiler:2.2.6"

    implementation "androidx.activity:activity-ktx:1.1.0"

    //dagger
    implementation "com.google.dagger:dagger:2.28.3"
    kapt "com.google.dagger:dagger-compiler:2.28.3"

    //rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.15'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //gson
    implementation 'com.google.code.gson:gson:2.8.6'

    //fragment-ktx
    implementation 'androidx.fragment:fragment-ktx:1.3.2'

    //implementation project(':wrapper')
    implementation(name: 'lint', ext: 'aar')


    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation "com.google.android.material:material:1.4.0"

    implementation "androidx.multidex:multidex:2.0.1"

    implementation 'com.github.bumptech.glide:glide:4.3.1'

    kapt 'com.github.bumptech.glide:compiler:4.3.1'
}

//2 配置阶段
//这里是调用不到的，要放在父工程中
//project.beforeEvaluate {
//    println '配置阶段 beforeEvaluate'
//}
gradle.afterProject {
    println '配置阶段 afterProject'
}
project.afterEvaluate {
    println '配置阶段 afterEvaluate'
}
gradle.projectsEvaluated {
    println '配置阶段 projectsEvaluated'
}
gradle.taskGraph.whenReady {
    println '配置阶段 whenReady'
}
// 3.执行阶段
gradle.taskGraph.beforeTask {
    println "执行阶段 beforeTask"
}
gradle.taskGraph.afterTask {
    println "执行阶段 afterTask "
}
// 4.build结束
gradle.buildFinished {
    println '构建结束 buildFinished'
}

//task myTask {
//    println '自定义task'
//}
