apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
}

//这个就是具体解析ec文件的任务，会根据我们指定的class路径、源码路径、ec路径进行解析输出
task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }

    getMyAllProjects()

    String path = project.hasProperty('filepath') ? project.property('filepath') : "test_path"
    println("path" + path)

    FileTree javaTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes",
            // 过滤不需要统计的class文件
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    FileTree kotlinTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug",
            // 过滤不需要统计的class文件
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])

    getClassDirectories().setFrom(kotlinTree, javaTree)

    getSourceDirectories().setFrom(files("$projectDir/src/main/java"))

    getExecutionData().setFrom(files("$buildDir/outputs/code_coverage/debugAndroidTest/connected/coverage.ec"))
}

def getMyAllProjects() {
    println "-------------------------------------"
    println "Root Project"
    println "-------------------------------------"

    // 获取所有project，包括本身
    this.getAllprojects().eachWithIndex { Project project, int index ->

        if (index == 0) {
            println "Root Project: ${project.name}"
        } else {
            println "+---- Project: ${project.name}"
        }
    }
}